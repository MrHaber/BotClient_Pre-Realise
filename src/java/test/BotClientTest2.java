import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.config.Configurator;
import org.jetbrains.annotations.NotNull;
import org.slf4j.LoggerFactory;

import com.google.common.collect.Maps;
import com.google.protobuf.Value;
import com.vk.api.sdk.actions.Users;
import com.vk.api.sdk.client.VkApiClient;
import com.vk.api.sdk.client.actors.GroupActor;
import com.vk.api.sdk.exceptions.ApiException;
import com.vk.api.sdk.exceptions.ClientException;
import com.vk.api.sdk.httpclient.HttpTransportClient;
import com.vk.api.sdk.objects.messages.KeyboardButtonActionType;
import com.vk.api.sdk.objects.messages.Message;
import com.vk.api.sdk.objects.users.Fields;

import lombok.val;
import ru.Haber.VkAPI.Annotations.AsyncInit;
import ru.Haber.VkAPI.Annotations.BotConfigurableHandler;
import ru.Haber.VkAPI.Annotations.BotHandler;
import ru.Haber.VkAPI.CustomCallback.CallbackMessagePayload;
import ru.Haber.VkAPI.CustomCallback.VkCallbackMessage;
import ru.Haber.VkAPI.CustomCallback.CallbackMessagePayload.VkMessagePayloadType;
import ru.Haber.VkAPI.bootstrap.BotClient;
import ru.Haber.VkAPI.bootstrap.BotClient.IBotUtils.VkMainConversationBotFunctions.CustomKeyboard;
import ru.Haber.VkAPI.bootstrap.BotClient.IBotUtils.VkMainConversationBotFunctions.KeyBoardBuilder.CarouselAction;
import ru.Haber.VkAPI.bootstrap.BotClient.IBotUtils.VkMainConversationBotFunctions.KeyBoardBuilder.ColorButton;
import ru.Haber.VkAPI.bootstrap.BotClient.IBotUtils.VkMainConversationBotFunctions.KeyBoardBuilder.CustomKeyboardButton;
import ru.Haber.VkAPI.bootstrap.BotClient.IBotUtils.VkMainConversationBotFunctions.KeyBoardBuilder.CustomKeyboardButtonActionType;
import ru.Haber.VkAPI.bootstrap.BotClient.IBotUtils.VkMainConversationBotFunctions.KeyBoardBuilder.VkCustomButton;

@BotHandler(token = "43efe317478cf7eb17a71a352341a3a12fdc432584b807b23e761049c367089cd3a52daf080eeb8cbecc9", id=191873806)
public class BotClientTest1 extends BotClient{

	private static final BotClientTest1 bot = newLocalExec(BotClientTest1::new, true);
	
	//protected static final Logger LOG = LoggerFactory.getLogger(HttpTransportClient.class);
	private static  Logger log4j = LogManager.getLogger(HttpTransportClient.class);
	
	
	
	@SuppressWarnings("unchecked")
	private static List<String> animeList = new ArrayList<String>() {{
		add("\n–ê–Ω–∏–º–µ: –ê–Ω–≥–µ–ª—å—Å–∫–∏–µ —Ä–∏—Ç–º—ã. \n–ñ–∞–Ω—Ä: –¢—Ä–∞–≥–µ–¥–∏—è, –î—Ä–∞–º–∞ üò≠\n");
		add("\n–ê–Ω–∏–º–µ: –¢–µ—Ç—Ä–∞–¥—å —Å–º–µ—Ä—Ç–∏. \n–ñ–∞–Ω—Ä: –¢—Ä–∏–ª–ª–µ—Ä, –î–µ—Ç–µ–∫—Ç–∏–≤ üîé\n");
		add("\n–ê–Ω–∏–º–µ: –î–µ–º–æ–Ω —Å—Ç—Ä–∞—à–µ–π —à–∫–æ–ª—ã. \n–ñ–∞–Ω—Ä: –≠—Ç—Ç–∏,–®–∫–æ–ª–∞ üß°\n");
		add("\n–ê–Ω–∏–º–µ: –û–≤–µ—Ä–ª–æ—Ä–¥ \n–ñ–∞–Ω—Ä: –ò—Å–µ–∫–∞–π üßù‚Äç‚ôÄ\n");
		add("\n–ê–Ω–∏–º–µ: –ù–∞—Ä—É—Ç–æ \n–ñ–∞–Ω—Ä: –ë–æ–µ–≤—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞ ü•ã\n");
		add("\n–ê–Ω–∏–º–µ: –ë–ª–∏—á \n–ñ–∞–Ω—Ä: –°–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ üîÆ\n");
		add("\n–ê–Ω–∏–º–µ: –ï–≤–∞–≥–µ–ª–∏–æ–Ω \n–ñ–∞–Ω—Ä: –ú–µ—Ö–∞, –î—Ä–∞–º–∞ ü§ñ\n");
	}};
	
	public BotClientTest1() {
		
		
		
	}
	
	public static Connection connection;
	
	private static Statement states;
	
	public static final Map<String, Integer> map = Maps.newConcurrentMap();
	
	//private static Logger logger = LoggerFactory.getLogger(SQLite.class);
	
	
	@Override
	public void onStart() {
		
		debug(true);
		
		systemLocale("ru");
		
		getInstaller().installHandler(new CommandDispatch());
		
		getInstaller().installCallbackEventHandler(new CommandDispatch());
		
		log4j.isTraceEnabled();
		
		Configurator.setLevel("com.vk.api.sdk.httpclient.HttpTransportClient",Level.WARN);
		
	
	
	}
	@AsyncInit(asyncId = 1)
	public static class CommandDispatch implements VkCommandExecutor,VkCallbackListener {
		
		@Override
		public void onCommand(@NotNull IBotUtils bot, @NotNull VkApiClient client, @NotNull GroupActor actor,
				@NotNull Message message, @NotNull String[] args) {
			
			this.callArgs(args);
			
			this.addCommandListener(message, arguments -> {
				bot.removeKeyboard("%name%, –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞");
				
			}, "/clear", "/clearkeyboard","/–æ—á–∏—Å—Ç–∏—Ç—å");
			/*if(!bot.isConversation() && !bot.isBotId(message.getFromId())) {
				bot.sendMessage("–¢–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö.");
				return;
			}*/
			
			/*this.addCommand(arges -> {
				
				if(arges.length <= 1) {
					bot.sendMessage("–ù–æ—Ä–º–∞–ª—å–Ω–æ —É–∂–µ –Ω–∞–ø–∏—à–∏ –±–ª—è–¥–æ—Ç–∞ !–æ–ø–æ–≤–µ—â–µ–Ω–∏—è [–∞—Ä–≥—É–º–µ–Ω—Ç—ã –±–ª—è—Ç—å]");
					return;
				}
				if(arges.length <= 2) {
					bot.sendMessage("!–æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞—Ç—å [–≤–∞—à –∫–æ–¥ –±–ª—è—Ç—å] \n!–æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–±–æ—Å—Å–∞—Ç—å [–∞–¥—Ä–µ—Å—Å –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞]");
					return;
				}
				if(arges.length <= 3 && arges[1].equalsIgnoreCase("–ø—Ä–∏–≤—è–∑–∞—Ç—å")) {
					bot.sendMessage("!–æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞—Ç—å [–ø–æ–≤–æ–¥–∫–æ–º –∫ —Å—Ç–æ–ª–±—É]");
					return;
				}
				if(arges.length <= 3 && arges[1].equalsIgnoreCase("–æ–±–æ—Å—Å–∞—Ç—å")) {
					bot.sendMessage("!–æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–±–æ—Å—Å–∞—Ç—å [–≤–∞—à–µ –ª–∏—Ü–æ]");
					return;
				}
				
				if (arges.length > 3) {
					if (args[1].equalsIgnoreCase("–æ–±–æ—Å—Å–∞—Ç—å")) {
						bot.sendMessage("–ú—ã –æ–±–æ—Å—Å–∞–ª–∏ –≤–∞—à–µ –ª–∏—Ü–æ –ø–æ –∞–¥—Ä–µ—Å—É: "+ arges[2]);
						return;
					}
					if (args[1].equalsIgnoreCase("–ø—Ä–∏–≤—è–∑–∞—Ç—å")) {
						bot.sendMessage("–ú—ã –ø—Ä–∏–≤—è–∑–∞–ª–∏ –≤–∞—Å —Å–≤–∏–Ω–≥–µ—Ä—Å–∫–æ–π —É–¥–∞–≤–∫–æ–π –∫ —Å—Ç–æ–ª–±—É –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: "+ arges[2]);
						return;
					}
				}
				//String playerName = arges[1];
				
				//bot.sendMessage("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –º–µ–Ω—è —Å–µ–º–ø–∞–π " + playerName);
				// TODO 
				
				
			}, "!–æ–ø–æ–≤–µ—â–µ–Ω–∏—è");
			*/
			this.addCommandListener(message, argumentsCache -> {
				if(bot.isConversation()) {bot.sendMessage("–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."); return;}
				val b1 = bot.functions().buttonBuilder().type(CustomKeyboardButtonActionType.CALLBACK).title("–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∏–º–µ")
						.callbackPayload(new CallbackMessagePayload().setType(VkMessagePayloadType.SHOW_SNACKBAR)
								.setText("–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –º–µ–Ω—é –∞–Ω–∏–º–µ")).color(ColorButton.GREEN).build();
				

				val keyVal = bot.functions().keyboardBuilder().inline(true).addButtonX(b1).singleComplete().build();
				
				bot.sendMessageWithKeyBoard("–í–æ—Ç –≤–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–µ–º–ø–∞–π", keyVal);
				
			}, "/callback");
			this.addCommandListener(message, arguments -> {
				
				val b1 = bot.functions().buttonBuilder().type(CustomKeyboardButtonActionType.OPEN_LINK)
						.link("https://primordial.dev").title("Yougame").payload(1).build();
				
				val b2 = bot.functions().buttonBuilder().type(CustomKeyboardButtonActionType.TEXT)
						.title("–î–æ–±–∞–≤–∏—Ç—å").color(ColorButton.BLUE).payload(2).build();
				
				val b3 = bot.functions().buttonBuilder().type(CustomKeyboardButtonActionType.TEXT)
						.title("–£–¥–∞–ª–∏—Ç—å").color(ColorButton.RED).payload(3).build();
				
				val b4 = bot.functions().buttonBuilder().type(CustomKeyboardButtonActionType.TEXT)
						.title("–î–æ–±–∞–≤–∏—Ç—å").color(ColorButton.BLUE).payload(4).build();
				
				val b5 = bot.functions().buttonBuilder().type(CustomKeyboardButtonActionType.TEXT)
						.title("–£–¥–∞–ª–∏—Ç—å").color(ColorButton.RED).payload(5).build();
				val f1 = bot.functions().elementBuilder()
						.addButton(b2).addButton(b3).addButton(b1).link("https://primordial.dev")
						.description("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ –∫–æ—Ç–æ—Ä–æ–º \n—Ö–æ—Ç–∏—Ç–µ —Å–∫–∞–∑–∞—Ç—å Millida Grash\n - 550 –±–∞–∫—Å–æ–≤")
						.type(CarouselAction.OPEN_LINK).photo_id("-191873806_457239094");
				
				val f2 = bot.functions().elementBuilder().addButton(b4).addButton(b5).addButton(b1).link("https://primordial.dev")
						.description("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ \n—Å–∫–∞–∑–∞—Ç—å Millida Trade Legacy \n- 10 –±–∞–∫—Å–æ–≤")
						.type(CarouselAction.OPEN_LINK).photo_id("-191873806_457239097");
				
				val source = bot.functions().carouselBuilder().addElementsBuilder(f1)
						.addElementsBuilder(f2).build();
				bot.functions().carouselBuilder().clearCache();
				
				bot.sendCarouselMessage("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–±–ª–∏–∫ –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å–∫–∏–Ω –∑–∞ 5 —Ä—É–±–ª–µ–π", source);
			},"/test");
			
			bot.chatEvent().onClick((userId,buttonId)->{
				
				//val payload = bot.currentButtonPayload(buttonId);
				if(buttonId.equals(bot.toPayload(2))) {
					bot.sendMessage("%name%, –í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–µ–±–µ Millida Grash –≤ —Å–ø–∏—Å–æ–∫");
				}
				if(buttonId.equals(bot.toPayload(3))) {
					bot.sendMessage("%name%, –í—ã —É–¥–∞–ª–∏–ª–∏ Millida Grash –∏–∑ —Å–ø–∏—Å–∫–∞");
				}
				if(buttonId.equals(bot.toPayload(4))) {
					bot.sendMessage("%name%, –í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–µ–±–µ Millida Trade –≤ —Å–ø–∏—Å–æ–∫");
				}
				if(buttonId.equals(bot.toPayload(5))) {
					bot.sendMessage("%name%, –í—ã —É–¥–∞–ª–∏–ª–∏ Millida Trade –∏–∑ —Å–ø–∏—Å–∫–∞");
				}
			}, 0);
		
			this.addCommand(arges -> {
				
				bot.sendSticker(17620);
				bot.sendReplyConversationMessage("Test", bot.getConversationId());
				//bot.sendMessageWithKeyBoard("Gradle test", keyboard.build());
				bot.sendAudioFile("Gradle Version is 6.7.0",
						bot.functions().speechText(bot.functions()
					.tts("en", "C:\\Users\\Mi\\AppData\\Local\\ArmA 2 OA\\MPMissionsCache\\audio.ogg", "Gradle Version is 6.7.0"), fail -> {
					bot.sendMessage("–ù–µ—É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
				}));
				
				
			}, "!gradlew", "gradle");
			
		}
		private static Map<Integer, Integer> users = Maps.newConcurrentMap();
		@Override
		public void onCallbackEvent(@NotNull Integer groupId, @NotNull VkCallbackMessage message,
				@NotNull IBotUtils bot) {
			
			if(bot.isConversation()) {bot.sendMessage("–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."); return;}
			
			if(message.getPayload().getType().equalsIgnoreCase("show_snackbar")) {
				bot.sendMessageEventAnswer(message.getEvent_id(), message.getUser_id(),
						
						message.getPeer_id(), message.getPayload().toString());
				users.put(bot.getFromUser(), 1);
			}
			if(message.getPayload().getType().equalsIgnoreCase("finish")) {
				val b1 = bot.functions().buttonBuilder().type(CustomKeyboardButtonActionType.CALLBACK).title("–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∏–º–µ")
						.callbackPayload(new CallbackMessagePayload().setType(VkMessagePayloadType.SHOW_SNACKBAR)
								.setText("–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –º–µ–Ω—é –∞–Ω–∏–º–µ")).color(ColorButton.GREEN).build();

				val keyVal = bot.functions().keyboardBuilder().inline(true).addButtonX(b1).singleComplete().build();
				bot.editMessageKeyboard("–ù–∞–¥–µ–µ–º—Å—è —á—Ç–æ –≤—ã –Ω–∞—à–ª–∏ —Å–µ–±–µ –∞–Ω–∏–º–µ –ø–æ –≤–∫—É—Å—É.üòã –ï—Å–ª–∏ –∑–∞—Ö–æ–¥–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë, "
						+ "–º—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å —ç—Ç—É –∫–Ω–æ–ø–∫—É üìå",keyVal
				,message.getPeer_id(),String.valueOf(message.getConversation_message_id()));
				
				users.put(bot.getFromUser(), 1);
				
				return;
			}
			val type = message.getPayload().getType().split("_");
			
			if(type[0].equalsIgnoreCase("n")) {
				users.put(bot.getFromUser(), users.get(bot.getFromUser())+1);
			}else {
				users.put(bot.getFromUser(), users.get(bot.getFromUser())-1);
			}
			CustomKeyboard keyboard = null;
			CustomKeyboardButton b1 = null;
			CustomKeyboardButton b2 = null;
			CustomKeyboardButton b3 = bot.functions().buttonBuilder()
					.type(CustomKeyboardButtonActionType.CALLBACK).title("–ó–∞–∫–æ–Ω—á–∏—Ç—å")
					.callbackPayload(new CallbackMessagePayload().setType("finish")).color(ColorButton.WHITE).build();
			if(users.get(bot.getFromUser()) < 6) {
				b1 = bot.functions().buttonBuilder()
					.type(CustomKeyboardButtonActionType.CALLBACK).title("–î–∞–ª–µ–µ >")
					.callbackPayload(new CallbackMessagePayload().setType("n_" + users.get(bot.getFromUser()))).color(ColorButton.GREEN).build();
			
			}
			if(users.get(bot.getFromUser()) >= 1) {
				b2 = bot.functions().buttonBuilder()
						.type(CustomKeyboardButtonActionType.CALLBACK).title("< –ù–∞–∑–∞–¥")
						.callbackPayload(new CallbackMessagePayload().setType("d_" + (users.get(bot.getFromUser())-1))).color(ColorButton.GREEN).build();
			}
			
			if(b1 != null && b2 != null) {
				keyboard = bot.functions().keyboardBuilder().inline(true).addButtonX(b1).addButtonX(b2).completeRow(b3).build();
			}
			if(b1 != null && b2 == null) {
				keyboard = bot.functions().keyboardBuilder().inline(true).addButtonX(b1).completeRow(b3).build();
			}
			if(b1 == null && b2 != null) {
				keyboard = bot.functions().keyboardBuilder().inline(true).addButtonX(b2).completeRow(b3).build();
			}
			bot.editMessageKeyboard("–í–∞—à–µ –º–µ–Ω—é –Ω–∏–∂–µ, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞–∫–æ–µ –∞–Ω–∏–º–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å."
					+ " üòÉ –ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã: "
					+ "\n"+animeList.get(users.get(bot.getFromUser())) + "\nüëâüèª –ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –∞–Ω–∏–º–µ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–æ –º–æ–∂–µ—Ç–µ, –ø–æ–∏—Å–∫–∞—Ç—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ animevost.org. üòç",keyboard
			,message.getPeer_id(),String.valueOf(message.getConversation_message_id()));
		}
		
	}

}
